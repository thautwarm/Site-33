Index Page
@begin ptag-filter-index
    Index
@end ptag-filter-index

@begin ptag-set
    Topic(Extras)
    Time('2023-01-11')
@end ptag-set

@center-all|1000|

@begin md

# 2022总结及2023计划（技术方面）

## 2022总结

1. (1-2月) 论文[Typed BNF: Backend-independent Semantic Actions](https://jssst-ppl.org/workshop/2022/accepted.html) 以及[开源实现](https://github.com/thautwarm/Typed-BNF)

2. (3-5月) [实现了一个能运行在Unity IL2CPP下的Python](http://github.com/thautwarm/Traffy.UnityPython/) ，其中，在安卓、iOS上的运行时并不提供Python源码编译功能，需要预先编译。

3. (6-8月) 确认自我定位。入职后迅速解决数个与商业化相关的Julia基础问题；利用在CPython和Numba的知识积累说服某著名强势甲方；[在为甲方实现Julia面向对象机制中成功发挥PL专业知识](https://github.com/Suzhou-Tongyuan/ObjectOriented.jl)。

4. (10月) 利用Typed BNF的ANTLR4+TypeScript后端实现了兼容MATLAB的语言解析器。

5. (3-12月) 熟练掌握了VSCode插件的编写，(4月) 实现了[UnityPython插件]https://github.com/thautwarm/vscode-unitypython)；(12月) 为公司实现类MATLAB语言的IDE插件，包括代码执行、工作空间保存及加载、MATLAB代码兼容性静态检测、根据文件系统自动更新删除函数定义等高级功能。

6. (8-9月) 优化了Julia生态中与Python互调用的底层机制: [JNumPy](https://github.com/Suzhou-Tongyuan/jnumpy)、[同元PyCall](https://github.com/Suzhou-Tongyuan/PyCall.jl)；与社区方案相比有如下先进之处：

    1. 支持被PackageCompiler.jl打包到system image中。System image创建是目前基于Julia的软件进行商业化发布的基础，这允许了基于Julia的商业化软件与Python生态进行集成。

    2. 正确支持了跨平台。同元PyCall可以支持Linux上静态链接的Python (例如已经成为事实标准的Conda Python)。

    3. 处理了不合理的预编译机制。社区PyCall要求每次切换Python环境时重新预编译PyCall，因此引起所有PyCall下游库的重新预编译。这在商业化软件中可能造成长达十多分钟的延迟，而同元PyCall规避了这些问题。(但同元Python只能处理3.7以上的Python，不支持Python2等版本）

    4. JNumPy中的TyPython支持在Julia侧远比PyCall和PythonCall更细粒度的Python操作，依靠JNumPy可以简化Python C扩展的实现，并且没有性能损失（但目前仍存在启动加载的latency问题）

## 2023计划

1. 设计和初步实现一个能组合多种语言优势的编程语言。主要集成Julia、Python以及PureScript (因为PS容易集成) 的生态。该语言只有抽象语法而不要求具体前端语法，拥有良好的静态检查支持以及LSP实现，能编译为exe (但不是独立的)，也能编译为动态链接库 (尝试达到同时也是Python模块)；尝试探索使用Node Editor编辑抽象语法而非使用具体语法；该项目原型能对公司内部的相关项目方向进行指导。

2. 基于Raylib和Facebook.Yoga实现一个声明式的MVU GUI框架。使用.NET 7调用C接口并编译到桌面平台的单个可执行文件。

3. 实现一个基于VSCode的小说管理插件。能够进行对大纲、人设和故事背景进行tag查询，该tag以polymorphic variant形式定义，因此能对复杂关系（如在xxx年活跃于yyy地区，种族是x或y的，单身，的两个人）进行查询。

@end md