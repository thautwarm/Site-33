首页：
@begin ptag-filter-index
    Index
@end ptag-filter-index

@center-all| |

目录:
@toc|--depth 2|
@begin ptag-set
    Topic(Configuration)
    Topic(Windows)
    Topic(Workflow)
    Time('2022-09-07')
    Language(Chinese)
    NeedTranslation
@end ptag-set

@begin md

# Windows上的Linux工作流搭建

今天在新电脑上配置工作环境，由于是每次都很耗时的重复工作，这次就来记录一下全流程。

## 这个页面的大概用处

首先是方便我自己以后配置环境。

此外，作为一份独家指南，本页面详细指导如何在Windows上搭建原生的linux工作环境。


## 关于MSYS2以及"Why NOT WSL?"

这个方案将基于MSYS2。不使用WSL的根本原因是，对于基础开发需求，WSL仍然与原生Linux开发有差异。

WSL的问题可以细分为以下几点：

1. Windows上书写的bash文件强行使用CRLF，因此在WSL下运行失败。

2. Windows上不能直接修改WSL中的文件，否则文件失效。

3. WSL的home不是Windows home，这意味着我有两个.bashrc/.zshrc，有两套不同的环境，两套环境还需要区别对待。虽有一定的互操作性，但Windows/WSL的文件/命令等对于另一方需特殊对待。

相比于使用WSL的诸多问题，我们使用MSYS2达成的效果是：一个支持Windows桌面系统的linux开发环境，或者一个正确支持的linux工具集的Windows @footnote|何为“正确支持”？:在包括但不限于unicode、路径转换、环境变量、二进制依赖等方面与Windows兼容。|。


## 配置流程

### 0. Windows系统驱动，以及代理软件

使用供应商提供的驱动安装方式，如thinkpad使用联想商店安装驱动。

@begin code --lang bash
@end code

对于代理软件，因为新机器的网络还未配置，此时获取软件是比较麻烦的。可以在旧机器上使用@code|python -m http.server <端口号>|开启文件服务器，然后在装机的机器上访问下载好的代理软件以及配置。

### 1. 最基本的配置


0. 将用户目录加入快速访问

1. 针对使用win+space切换输入法以避免按键冲突的用户解决Windows输入法问题，做以下步骤：

    - 卸载默认的中文输入法 (在首先语言里删除中文)
    - 安装想要的输入法，如搜狗输入法
    - 新建一个注册表文件`坑爹bug.reg` ([来源的知乎回答](https://www.zhihu.com/question/22288432/answer/447721321))，输入如下内容并执行，重启生效：
        @begin code --lang registry
                Windows Registry Editor Version 5.00
                [HKEY_CURRENT_USER\Control Panel\Input Method\Hot Keys\00000010]
                "Key Modifiers"=hex:00,c0,00,00
                "Virtual Key"=hex:ff,00,00,00
                [HKEY_CURRENT_USER\Control Panel\Input Method\Hot Keys\00000070]
                "Key Modifiers"=hex:00,c0,00,00
                "Virtual Key"=hex:ff,00,00,00
                [HKEY_USERS\.DEFAULT\Control Panel\Input Method\Hot Keys\00000010]
                "Key Modifiers"=hex:02,c0,00,00
                "Target IME"=hex:00,00,00,00
                "Virtual Key"=hex:ff,00,00,00
                [HKEY_USERS\.DEFAULT\Control Panel\Input Method\Hot Keys\00000070]
                "Key Modifiers"=hex:02,c0,00,00
                "Target IME"=hex:00,00,00,00
                "Virtual Key"=hex:ff,00,00,00
        @end code

2. 针对Emacs用户，切换Ctrl和Capslock键:

    - 新建注册文件`switch-ctrl-capslock.reg`输入以下内容并执行，重启生效：
        @begin code
                    Windows Registry Editor Version 5.00
                    [HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Keyboard Layout]
                    "Scancode Map"=hex:00,00,00,00,00,00,00,00,02,00,00,00,1d,00,3a,00,00,00,00,00
        @end code

3. (对于使用Edge的用户) 使用规则代理：

    - 开启全局代理。

    - 打开Microsoft Edge，访问Chrome商店，为Edge安装SwitchyOmega。

        注意：移植到Edge商店中的SwitchyOmega有后门，会窃取你的支付信息等，为了避免造成严重的财产损失，请务必使用Chrome商店上的官方SwitchyOmega。

    - 设置完规则代理后，关闭全局代理。

### 2. 开发环境配置


1. 安装更新的powershell:

    [https://docs.microsoft.com/zh-cn/powershell/scripting/install/installing-powershell-on-windows](https://docs.microsoft.com/zh-cn/powershell/scripting/install/installing-powershell-on-windows)

    该页面应包含powershell下载链接。

2. 配置Windows包管理器scoop

    - 官方页面 [https://scoop.sh/](https://scoop.sh/) 介绍了最新的scoop安装方法。记得设置Policy时要使用管理员权限。

    - 安装scoop后，执行以下命令：

        @begin code --lang bash
                [net.webrequest]::defaultwebproxy = new-object net.webproxy "http://127.0.0.1:<端口号>"
                scoop config proxy 127.0.0.1 <端口号>
                scoop install git
        @end code

3. 安装vscode:

    @begin code
            scoop install vscode
            # 右键打开vscode （执行后重启生效）：
            C:\Users\<用户名>\scoop\apps\vscode\current\install-associations.reg
    @end code

    随后打开vscode, 登录GitHub账号，同步键位和主题。

4. 配置msys2和其他插件 （建议暂且先使用我提供的配置，后续做自定义修改）

    1. 在windows高级系统设置里，设置用户系统变量

        @begin code
                HOME=C:\Users\<用户名>
                HOMEPATH=C:\Users\<用户名>
        @end code

    2. 安装字体Caskaydia Cove Regular Nerd Font Complete Windows Compatible.otf

        字体目录链接:

        [https://github.com/ryanoasis/nerd-fonts/tree/master/patched-fonts/CascadiaCode/Regular/complete](https://github.com/ryanoasis/nerd-fonts/tree/master/patched-fonts/CascadiaCode/Regular/complete)

    3. 从应用商店安装windows terminal （如果windows应用商店无法打开，可以直接在浏览器中访问 [windows-terminal](https://www.microsoft.com/zh-cn/p/windows-terminal/9n0dx20hk701?activetab=pivot:overviewtab)。

    4. 打开windows terminal，修改键位：将`switch-to-tab index <编号>`设置为`alt + <编号 - 1>`。

    5. 安装MSYS2和一些重要插件，但暂且先不要执行`msys2`命令。

        @begin code
                scoop install msys2
                scoop install fnm
        @end code

    6. windows terminal点开settings，新建空profile，任意取名，commend line参数填入`mingw64.cmd -shell bash`。

        将该profile设置为默认profile。找不到图形界面可以打开JSON Settings，将默认的profile uuid改为刚刚新建的profile的uuid。所有信息都可以在JSON Settings中找到。

    7. 设置刚刚新建的Profile的外观 (Appearance选项)，将字体设置为刚刚安装的CaskaydiaCove NF，颜色主题自选。

    8. 新建`~/.bash_profile`，用vscode打开，填入以下内容

        <details>
            <summary>点击展开.bash_profile 文件内容</summary>
            <p>
            @begin code
                    if [ -f "${HOME}/.bashrc" ] ; then
                        source "${HOME}/.bashrc"
                    fi
            @end code
            </p>
        </details>

    9. 新建`~/.bashrc`，填入以下内容 （推荐走完配置流程后再自行配置）。

        <details>
            <summary>点击展开.bashrc 文件内容</summary>
            <p>
            @begin code
            # ~/.bsahrc
                    export PUB_HOSTED_URL=https://pub.flutter-io.cn
                    export FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn
                    export PYTHONIOENCODING=utf8
                    export JULIA_PKG_SERVER="https://mirrors.ustc.edu.cn/julia"
                    PROMPT_COMMAND="prompt-command"
                    # cache init
                    export NODE_MIRROR=https://mirrors.tuna.tsinghua.edu.cn/nodejs-release/
                    export FNM_NODE_DIST_MIRROR=https://mirrors.tuna.tsinghua.edu.cn/nodejs-release/
                    eval "$(fnm env --use-on-cd)"
                    export PATH="$HOME/.local/bin:$HOME/local/Julia-1.7.2/bin:$PATH"
                    # conda setup
                    function use-conda(){
                        if command -v conda &> /dev/null
                        then
                            source activate base
                        fi
                    }
                    if [[ -z "$my_pragma_once" ]]; then
                        source ~/.bashfiles/color.sh
                        source "$(scoop prefix git)\etc\profile.d\git-prompt.sh"
                        source /usr/share/bash-completion/bash_completion
                        export PATH=$HOME/scoop/shims:$PATH
                        export my_pragma_once=1
                    fi
                    HISTSIZE=100000
                    HISTFILESIZE=200000
                    HOME=~
                    HISTFILE=~/.bashistory
                    bind 'set show-all-if-ambiguous on'
                    bind 'TAB:menu-complete'
                    bind '"\e[A": history-search-backward'
                    bind '"\e[B": history-search-forward'
                    bind '"\eOA": history-search-backward'
                    bind '"\eOB": history-search-forward'
                    function setup-bash-git(){
                        pacman -S mingw-w64-x86_64-emacs
                        git config --global core.autocrlf false
                        git config --global core.eol lf
                        git config --global core.editor "emacs"
                        # 取消下行注释，使用vscode作为git的默认编辑器
                        # git config --global core.editor "code --wait"
                    }
                    STATUS_THEME_PROMPT_BAD="${bold_red}💢${reset_color}${normal} "
                    STATUS_THEME_PROMPT_OK="${bold_green}✅${reset_color}${normal} "
                    function mode-simple(){
                        SIMPLE_PROMPT=1
                    }
                    function mode-pretty(){
                        SIMPLE_PROMPT=
                    }
                    function j(){
                        cd "$(ajmp complete $@)"
                    }
                    function chpwd(){
                        ajmp update "$PWD"
                    }
                    function prompt-command(){
                        # record history
                        history -a
                        # apply chpwd
                        if [[ "$LASTWD" !=  "$PWD" ]]; then
                            chpwd
                        fi
                        LASTWD=$PWD
                        # set prompt status
                        if [ $? -eq 0 ]
                        then
                            my_status=" $STATUS_THEME_PROMPT_OK"
                        else
                            my_status=" $STATUS_THEME_PROMPT_BAD"
                        fi
                        # compute PS1
                        local git_ps branch untracked dirty py
                        if [[ -z "$SIMPLE_PROMPT" ]]; then
                            if command -v python &> /dev/null
                            then
                                py=" ${blue} $(python --version | sed 's/[[:alpha:]|(|[:space:]]//g')${reset_color}"
                            fi
                            git rev-parse 2> /dev/null
                            if [[ $? -eq 0 ]]; then
                                branch=$(git branch 2>/dev/null | grep '*' | sed 's/* \(.*\)/\1/')
                                if [[ -n $(git status -s) ]]; then
                                    untracked="${yellow}●${reset_color}"
                                fi
                                git diff --quiet || dirty="${red}✘${reset_color}"
                                git_ps=" ${cyan} (${branch}${reset_color}${dirty}${untracked}${cyan})${reset_color}"
                            fi
                        fi
                        PS1="\n${blue} \u ${reset_color}${yellow} \D{}${reset_color}${git_ps}${py}${my_status}${blue} \w\n ${normal}"
                        PS2=" "
                    }
                    # DOTNET的固定配置路径
                    export PATH="C:\Users\$USER\.dotnet\tools:$PATH"
                    bind '"\C-H":backward-kill-word'
            @end code
            </p>
        </details>

    10. 安装Python和一些工具，修复一些Window问题。

        1. 从 https://conda-forge.org/miniforge/ 安装miniforge。

            建议加入勾选【将miniforge环境加入路径】的选项，这是为了对抗Windows将Python设为默认命令的设计失误。按此设置，开发过程能规避很多问题。

            安装完miniforge后，你的默认环境中有`python`和`pip`。

        2. `pip install autojmp`，配合上面的`.bashrc`设置，你将能以`j+模糊地址`的方式，跳转到以前去过的目录。

    11. 设置初步完成，打开windows terminal，你现在拥有一个和Linux别无二致的终端环境！

        总的来说，你拥有这些东西：

        1. 支持**主要zsh功能**的终端（上下键历史补全，tab补全，vim/emacs快捷键，git补全）
        2. **两个包管理器**：scoop (安装windows应用) 和pacman (安装mingw64应用)
        3. Linux命令集

### 常用环境配置


SSH和GitHub:

1. 生成ssh公私钥: @code||ssh-keygen -t ed25519||

2. 复制ssh公钥： @code||| cat ~/.ssh/id_ed25519.pub | clip |||

3. 打开https://github.com/settings/keys， 新建SSH key，key设置为复制结果。

Emacs安装:

- 下面的安装是Windows上诸多Emacs发行版中唯一可用的那个，它支持unicode和从命令行打开。
    @begin code
        pacman -S mingw-w64-x86_64-emacs
    @end code

Git设置：
    @begin code
        # git config --global core.autocrlf false
        # git config --global core.eol lf
        #
        # 对emacs用户
        git config --global core.editor "emacs"
        # 对vscode用户
        git config --global core.editor "code --wait"
    @end code

常用软件及镜像配置：

@begin code
# .net, unity
scoop install dotnet-sdk

# java
scoop bucket add java
scoop install openjdk （重启terminal之后java可以访问）

# LaTeX
scoop install miktex
pacman -S make # latexmk需要make

# pip
pip config set global.index-url https://mirrors.bfsu.edu.cn/pypi/web/simple # 使用北京外国语大学镜像

# conda
# 将~/.condarc设置为北京外国语大学镜像：
channels:
  - https://mirrors.bfsu.edu.cn/anaconda/cloud/conda-forge/
# 如果是非商业/教育版用户、可以直接使用anaconda的商业源，配置方法见：https://mirrors.bfsu.edu.cn/help/anaconda/

@end code

## 其他

1. 自定义右键菜单，推荐使用这个软件：https://github.com/BluePointLilac/ContextMenuManager

2. Windows更新后，部分scoop应用无法从命令行打开了(`$PATH`被重置)：

    @begin code
        # 修复单个应用
        scoop reset <应用名>
        # 修复所有应用
        scoop reset *
    @end code

@end md