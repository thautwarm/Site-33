@begin ptag-set
    Time('2022-08-17')
@end ptag-set

@center-all|1000|

<hr>

@begin img ast-tree
    src: ./interpreter-ast-tree.png
    width: 800px
@end img

@begin py
sp = lambda n: '&nbsp;' * n
@end py

@begin md tables code-friendly

# 编程语言解释器的理解、设计和实现

@toc|--depth 2|

## 语法和语义

### 什么是语法

语法 (syntax) 是指代码文本的规范，只有符合语法的代码才可能被编译器/解释器处理。

@begin code --lang go
@end code

例如，@code|a = 1;| 是C语言的赋值语法，而 @code|a := 1| 在C语言中不合法。

一个重要的概念是**语法结构**： 它通常以语法树 (syntax tree) 的形式展现:

<br>

<p align="center">
    @img|ast-tree|
</p>

<br>

### 语法和BNF

语法规则通常使用BNF文法定义。下面是四则运算的语法规则：

@end md


<table width="100%">

<tr>

<td>

@begin code --lang antlr
e : addsub

addsub : addsub '+' muldiv
       | addsub '-' muldiv
       | muldiv

muldiv : muldiv '*' atom
       | muldiv '/' atom
       | atom

atom : '(' e ')' | NUMBER



@end code

</td>

<td>

@begin code --lang C
@end code

@begin md
问题:

1. "@code|(1 + 1) + 1|"是否是合法的四则运算语言文本？

2. "@code|(1 / 2) + 1|"是否是合法的四则运算语言文本？

3. "1.2"是否是合法的四则运算语言文本？

4. 如果"1 + 1.2"对应**语法树**是@code|Add(Int(1), Float(1.2))|，

   问："@code|1 + 1.2 * 2|"的语法树是？

@end md

</td>
</tr>
</table>

@begin md

### 抽象语法树和具体语法树

根据BNF文法，我们将语言的文本解析为语法树——文本在语法规则下的结构化表示。

常用的语法树有两种：

1. 具体语法树 (CST)： 除开结构化语法外，事无巨细地记录源代码信息。*CST可以无损地转回源代码*。
2. 抽象语法树：只考虑后续工作需要的语法结构，抛弃不需要的信息，如空白符，分隔符，缩进等。

举例子，给定一个语句 @code|a = 1;|, 通常类似于

@end md

@begin float --width "30%" --align left


@md|**具体语法树**:|

@begin code --lang Python
    Statement(
        kind = "assign",
        children = [
            Variable("a"),
            Token("="),
            IntLiteral(1),
            Token(";")
        ]
    )
@end code
@end float

@begin float --width "30%" --align left

@md|**抽象语法树**:|

@begin code --lang Python
    Assignment(
        target=Variable("a"),
        value=IntLiteral(1)
    )
@end code

<br>

@end float

@begin py
loop = lambda a, n: a * n
@end py

@py|("<br/>" + sp(30)) * 10|


上述的语法树仍然只是简化的形式（略去了行列号等），但可以看到抽象语法树的信息比具体语法树更少也更加紧凑。


在包括编译、解释和各式代码分析的大部分任务中，只会用到抽象语法树，而具体语法树没有用处。这也意味着语言的具体语法通常不影响语言的运行。

一门编程语言可以拥有多种具体语法，只要他们的语法结构和语义相同，他们仍然之间的差异，例如 @code|f(x, y, z)| 和 @code|call f x, y, z| , 是表面的。

@begin md

### 重要的语法结构：抽象语法树

抽象语法树是编译器/解释器工作的基础（通常是编译器/解释器的输入）。

抽象语法树一般表示为代数数据类型 (ADT, Algebraic Data Type)，语法树常常被分为多个种类(sort)，绝大多数编程语言有以下的sort划分：

- 表达式: 例如整数字面量表达式，函数调用表达式，二元运算表达式等。

- 语句：例如赋值语句，if语句等。

- 定义：例如数据类型定义，函数定义等。

由上可见，每一个sort都可能继续划分。每一个sort可能有一到多个构造器 (constructor)。例如, 表达式sort有整数字面量、函数调用表达式和二元运算表达式这些constructor：

@begin code
Expr = IntLiteral(value: int)
     | FunctionCall(func: Expr, args: list<Expr>)
     | BinaryExpr(left: Expr, op: BinaryOperator, right: Expr)
     | ...
@end code

上面定义sort的语言叫抽象语法定义语言(ASDL, Abstract Syntax Definition Language)。

我们会频繁使用ASDL、BNF这些语言来提高沟通效率。

以下是四则运算的语法树：

@begin code
ArithExpr = Add(left: ArithExpr, right: ArithExpr)
          | Sub(left: ArithExpr, right: ArithExpr)
          | Mul(left: ArithExpr, right: ArithExpr)
          | Div(left: ArithExpr, right: ArithExpr)
          | Number(value: number)
@end code

@end md

@begin md

### 什么是语义


语义是对语法结构的解释。

解释方式是多样的。打印语法树是其中一种解释。一般来说，我们关注的解释方式是代码执行 (evaluation) 。

可以用如下框架表示evaluation的语义：

<p align="center">
语法结构@math|X|的执行结果是 @math|r| @math|\Longleftrightarrow| @math|| X \rightsquigarrow r ||.
</p>

这里的 @math|X| 是一个语法结构，如果对应编程概念，它是host language (实现编译器、解释器所使用的语言) 中的数据结构 @footnote||| X的严格定义: @math|| | X | \rightsquigarrow r || 中的 @math|X| 实际上不应该对应任何编程语言，它是一个形式化的表述，用来简洁、精准地表达一门语言的语法。实际上在学术界中，通常直接使用语言而不是语法结构，这可能是为了直观，却常常导致复杂的歧义/小圈子黑话。 @footnote|(op-seman) TODO: 使用bar表示“向量化”的例子| ||| ；

这里的 @math|r| 是一个值，如果对应编程概念，它属于target language。和上面的 @math|X| 一样，用编程语言比喻这里的值并不精准。@footnote||  r的严格定义: @code|r| 的取值范围，是用BNF定义的、非特定target language的数据结构。||


上面这个框架用来表达四则运算语言的语法绰绰有余：

<p align="center">
    @math| \text{Add(Number(2), Number(2.0))} \rightsquigarrow 4.0 |
</p>


在下文中，我们说语法结构时，都特指抽象语法树。除非表述无法推广到任意语法结构。


@end md

@begin md

### 语义和相继式

合法的语法结构是不能枚举的，我们不可能写下：

<p align="center">
    @math| \text{Add}(1, \text{Add}(1, \text{Add}(\cdots,  \text{Add}(\text{Number}(1), \text{Number}(1)))) \rightsquigarrow 2992 |
</p>

注意到语法结构的定义是递归的，我们也可以定义出一套递归的、有限的规则，为**合法语法结构的全体**描述语义。为了做到这一点，我们介绍相继式：

<p align="center">
    @math|\dfrac{c_1 \;\; c_2 \;\; c_3 } {c_4} \Longleftrightarrow| 在条件@math|c_1 c_2 c_3|都成立的情况下，@math|c_4|成立。
</p>

<br>

我们定义一些元符号 (可以大致理解为宿主语言中的变量)：

@begin math
i, i_1, i_2 \cdots i_n \in \text{实数} \\
X, Y \in \text{四则运算语言的语法结构全集}\\
calc(i_1, i_2),\; f \in {+, -, *, /}  \text{分别表示表示计算两个实数的加/减/乘/除} \\
@end math

<br>

借助这些元符号，我们定义四则运算语言的完整语义(乘法，除法，减法被省略)：

<p align="center">
@begin math
\dfrac{X \rightsquigarrow i_1 \;\; Y \rightsquigarrow i_2 }{\text{Add}(X, Y) \rightsquigarrow +(i_1, i_2) } \qquad \dfrac{ }{ \text{Number}(i) \rightsquigarrow i}
@end math
@py|sp(2)| @footnote||Staging error: 这里，@math|\rightsquigarrow|两侧出现的@math|i|实际上是不同的。他们身处不同的语言中，就像文本中的1和C++里为1的值截然不同。 ||
</p>

@end md

@begin md

### 带状态的语义


在Java和C++语言中心，我们可以修改一个对象的字段。这是一个副作用，因为它们会引起某些函数对相同参数的调用返回不同的值。

@begin float --width "40%"
@begin code --lang C++
static struct MyTypeRef *val = { ... };

int some_func(int factor)
{
    return val -> a * factor;
}

int main()
{
    int result1, result2;
    result1 = some_func(2.0);
    val -> a = 1; // 对象val的字段a被修改
    result2 = some_func(2.0);
    // result1 != result2, 副作用！
    return 0;
}

@end code
@end float


我们方才介绍的 @math|| X \rightsquigarrow r || 不足以描述这个语义。我们原先只考虑了返回值，但一些语言中，语法结构涉及上面提到的副作用。

副作用的本质是函数调用被隐式地增加了一个参数：全局状态参数。当我们写下@code|f(arg)|的时候，我们实际上写下了@code|f(GLOBAL_STATE, arg)|。

因为程序的行为受全局状态影响，而语义应该完全决定程序行为，所以带有副作用的编程语言，其语义必须描述全局状态。在这种情况下，描述语义的框架通常是：

<p align="center">
@math|(S, X) \longrightarrow (r, S)|
</p>

这是非常痛苦的。

<br/>
<br/>

在本文之后的部分，我们的表述将会从理论上的“不精准”转变为“不正确”——这就是说，虽然我们仍使用@math|(S, X) \longrightarrow (r, S)|来描述一部分状态，但我们将忽略一些特殊的、我们不关心的副作用，例如IO等。例如，当我们的语义处理打印语句时，我们认为这里出现了一个函数调用，它实际做了打印，但我们的语义将其视为一个空返回值的纯函数。

所幸的是，这种“不正确”丝毫不影响我们精准地理解程序语言的语义，它是一种折衷。如果你真的需要“更正确”的框架描述来描述具有副作用的语言的语义，你可能需要接触Haskell的副作用观点，它巧妙地将副作用表示为状态初值@math|S_0|上发生的一系列变换： @math|S_n = \textit{eff}_n(\cdots, \textit{eff}_2(\textit{eff}_1(S_0)))|。

既然已经“不正确”，索性就更加追求刺激咯。我们直言：在本文以下部分，语法结构是host language中的数据结构，而状态@math|S|以及返回值@math|r|是target language中的数据结构。为了让表述更加方便，我们让host language等于target language，这样一来，前文中@math|\text{Number}(n) \rightsquigarrow n|的含义就非常明确。

@end md